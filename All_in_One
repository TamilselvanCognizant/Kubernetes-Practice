Pods, replicas, deployments, services , etc will use the following structure of yaml file. 

ApiVersion 

Kind 

Metadata 

Spec  

 

Kind  

Version  

POD  

v1  

Service  

v1  

ReplicaSet  

apps/v1  

Deployment  

apps/v1  

 

Pod-definition.yml  

apiVersion: v1 

kind: Pod 

metadata:  

  name: myapp-pod 

  labels: 

    app: myapp 

    type: front-end 

spec: 

  containers: 

    - name: nginx-container 

      image: nginx 

 

Kubectl create  -f Pod-definition.yml 

Kubectl delete -f Pod-definition.yml 

 

Controllers: 

 Replication controllers. 

 

replicaset-definition.yml 

 

apiVersion: apps/v1 

kind: ReplicaSet 

metadata:  

  name: myapp-replicaset 

  labels: 

    app: myapp 

    type: front-end 

spec: 

  template: 

    metadata:  

      name: myapp-pod 

      labels: 

        app: myapp 

        type: front-end 

    spec: 

      containers: 

        - name: nginx-container 

          image: nginx 

  replicas: 5 

  selector: 

    matchLabels: 

      type: front-end 

 

Kubectl scale --replicas=2 –f replicaset-definition.yml 

Kubectl scale --replicas=3 replicaset myapp-replicaset  

Kubectl replace –f replicaset-definition.yml  

Kubectl delete -f replicaset-definition.yml 

 

Deployment-definition.yml 

apiVersion: apps/v1 

kind: Deployment 

metadata:  

  name: myapp-deployment 

  labels: 

    tier: front-end 

    app: nginx 

spec: 

  template: 

    metadata:  

      name: myapp-pod 

      labels: 

        app: myapp 

        type: front-end 

    spec: 

      containers: 

        - name: nginx-container 

          image: nginx 

  replicas: 3 

  selector: 

    matchLabels: 

      type: front-end 

 

Kubectl create –f deployment-definition.yml --record 

Kubectl get deployments 

Kubectl describe deployments myapp-deployment  

Kubectl apply –f deployment-definition.yml 

Kubectl set image deployment/myapp-deployment nginx-container=nginx:1.18 --record 

Kubectl rollout status deployment/myapp-deployment 

Kubectl rollout history deployment/myapp-deployment 

Kubectl set image deployment/myapp-deployment nginx-container=nginx:1.18-no-image --record 

Kubectl rollout undo deployment/myapp-deployment 

Kubectl delete deployment myapp-deployment  

 

Services 

NodePort(port range 30000-32767) 

 

Service-nodeport-definition.yml  

apiVersion: v1 

kind: Service 

metadata: 

  name: myapp-services 

spec: 

  type: NodePort 

  ports: 

    - port: 80 

      targetPort: 80 

      nodePort: 30004 

  selector: 

    app: myapp 

 

kubectl apply -f service-definition.yml 

minikube service list 

Kubectl get services  

http://192.168.99.100:30004/ 

 

 

 

Microservices 

Voting app  

 

voting-app-pod.yml  

 

apiVersion: v1 

kind: Pod 

metadata: 

  name: voting-app-pod 

  labels: 

    name: voting-app-pod 

    app: demo-voting-app 

spec: 

  containers: 

    - name: voting-app 

      image: kodekloud/examplevotingapp_vote:v1 

      ports: 

        - containerPort: 80 

 

redis-pod.yml 

 

apiVersion: v1 

kind: Pod 

metadata: 

  name: redis-pod 

  labels: 

    name: redis-pod 

    app: demo-voting-app 

spec: 

  containers: 

    - name: redis 

      image: redis 

      ports: 

        - containerPort: 6379 

 

worker-pod.yml 

 

apiVersion: v1 

kind: Pod 

metadata: 

  name: worker-app-pod 

  labels: 

    name: worker-app-pod 

    app: demo-voting-app 

spec: 

  containers: 

    - name: worker-app 

      image: kodekloud/examplevotingapp_worker:v1 

       

 

postgres-pod.yml 

 

apiVersion: v1 

kind: Pod 

metadata: 

  name: postgres-pod 

  labels: 

    name: postgres-pod 

    app: demo-voting-app 

spec: 

  containers: 

    - name: postgres 

      image: postgres 

      ports: 

        - containerPort: 5432 

      env: 

        - name: "POSTGRES_USER" 

          value: "postgres" 

        - name: "POSTGRES_PASSWORD" 

          value: "postgres" 

 

result-app-pod.yml 

 

apiVersion: v1 

kind: Pod 

metadata: 

  name: result-app-pod 

  labels: 

    name: result-app-pod 

    app: demo-voting-app 

spec: 

  containers: 

    - name: result-app 

      image: kodekloud/examplevotingapp_result:v1 

      ports: 

        - containerPort: 80 

 

voting-app-service.yml 

 

apiVersion: v1 

kind: Service 

metadata: 

  name: voting-service 

  labels: 

    name: voting-service 

    app: demo-voting-app 

spec: 

  type: NodePort 

  ports: 

    - port: 80 

      targetPort: 80 

      nodePort: 30004 

  selector: 

    name: voting-app-pod 

    app: demo-voting-app 

 

redis-service.yml 

 

apiVersion: v1 

kind: Service 

metadata: 

  name: redis 

  labels: 

    name: redis-service 

    app: demo-voting-app 

spec: 

  ports: 

    - port: 6379 

      targetPort: 6379 

  selector: 

    name: redis-pod 

    app: demo-voting-app 

 

postgres-service.yml 

 

apiVersion: v1 

kind: Service 

metadata: 

  name: db 

  labels: 

    name: postgres-service 

    app: demo-voting-app 

spec: 

  ports: 

    - port: 5432 

      targetPort: 5432 

  selector: 

    name: postgres-pod 

    app: demo-voting-app 

 

result-service.yml 

 

apiVersion: v1 

kind: Service 

metadata: 

  name: result-service 

  labels: 

    name: result-service 

    app: demo-voting-app 

spec: 

  type: NodePort 

  ports: 

    - port: 80 

      targetPort: 80 

      nodePort: 30005  

  selector: 

    name: result-app-pod 

    app: demo-voting-app 

 

 

 

kubectl create -f voting-app-pod.yml 

kubectl create -f voting-app-service.yml 

minikube service voting-service –url 

 

kubectl create -f postgres-pod.yml 

kubectl create -f postgres-service.yml 

 

kubectl create -f redis-pod.yml 

kubectl create -f redis-service.yml 

 

kubectl create -f worker-pod.yml 

 

kubectl create -f result-app-pod.yml 

kubectl create -f result-app-service.yml 

 

voting-app-deployment.yml 

 

apiVersion: apps/v1 

kind: Deployment 

metadata: 

  name: voting-app-deploy 

  labels: 

    name: voting-app-deploy 

    app: demo-voting-app 

spec: 

  replicas: 1 

  selector: 

    matchLabels: 

      name: voting-app-pod 

      app: demo-voting-app 

  template: 

    metadata: 

      name: voting-app-pod 

      labels: 

        name: voting-app-pod 

        app: demo-voting-app 

    spec: 

      containers: 

        - name: voting-app 

          image: kodekloud/examplevotingapp_vote:v1 

          ports: 

            - containerPort: 80 

 

redis-deployment.yml 

 

apiVersion: apps/v1 

kind: Deployment 

metadata: 

  name: redis-deploy 

  labels: 

    name: redis-deploy 

    app: demo-voting-app 

spec: 

  replicas: 1 

  selector: 

    matchLabels: 

      name: redis-pod 

      app: demo-voting-app 

  template: 

    metadata: 

      name: redis-pod 

      labels: 

        name: redis-pod 

        app: demo-voting-app 

    spec: 

      containers: 

        - name: redis 

          image: redis 

          ports: 

            - containerPort: 6379 

 

worker-app-deployment.yml 

 

apiVersion: apps/v1 

kind: Deployment 

metadata: 

  name: worker-app-deploy 

  labels: 

    name: worker-app-deploy 

    app: demo-voting-app 

spec: 

  replicas: 1 

  selector: 

    matchLabels: 

      name: worker-app-pod 

      app: demo-voting-app 

  template: 

    metadata: 

      name: worker-app-pod 

      labels: 

        name: worker-app-pod 

        app: demo-voting-app 

    spec: 

      containers: 

        - name: worker-app 

          image: kodekloud/examplevotingapp_worker:v1 

 

postgres-deployment.yml 

 

apiVersion: apps/v1 

kind: Deployment 

metadata: 

  name: postgres-deploy 

  labels: 

    name: postgres-deploy 

    app: demo-voting-app 

spec: 

  replicas: 1 

  selector: 

    matchLabels: 

      name: postgres-pod 

      app: demo-voting-app 

  template: 

    metadata: 

      name: postgres-pod 

      labels: 

        name: postgres-pod 

        app: demo-voting-app 

    spec: 

      containers: 

        - name: postgres 

          image: postgres 

          ports: 

            - containerPort: 5432 

          env: 

            - name: "POSTGRES_USER" 

              value: "postgres" 

            - name: "POSTGRES_PASSWORD" 

              value: "postgres" 

 

result-app-deployment.yml 

 

apiVersion: apps/v1 

kind: Deployment 

metadata: 

  name: result-app-deploy 

  labels: 

    name: result-app-deploy 

    app: demo-voting-app 

spec: 

  replicas: 1 

  selector: 

    matchLabels: 

      name: result-app-pod 

      app: demo-voting-app 

  template: 

    metadata: 

      name: result-app-pod 

      labels: 

        name: result-app-pod 

        app: demo-voting-app 

    spec: 

      containers: 

        - name: result-app 

          image: kodekloud/examplevotingapp_result:v1 

          ports: 

            - containerPort: 80 

 

kubectl create -f voting-app-deployment.yml 

kubectl create -f voting-app-service.yml 

kubectl create -f redis-deployment.yml 

kubectl create -f redis-service.yml 

kubectl create -f worker-app-deployment.yml 

kubectl create -f postgres-deployment.yml 

kubectl create -f postgres-service.yml 

kubectl create -f result-app-deployment.yml 

kubectl create -f result-app-service.yml 

 

minikube service voting-service –url 

minikube service result-service –url 
